use btl


# Cau 1
db.companies.aggregate([
    {
      $lookup: {
        from: "services",
        localField: "used_service.service_id",
        foreignField: "IdService",
        as: "services"
      }
    },
    {
      $project: {
        _id: 1,
        name: 1,
        tax_code: 1,
        charter_capital: 1,
        industry: 1,
        employee_count: 1,
        address: 1,
        phone: 1,
        area: 1,
        used_service: {
            $filter: {
                input: "$used_service",
                as: "used_service",
                cond: { $eq: ["$$used_service.paied", 0] }
            }
        },
          services: 1
        }
    },
    {
      $set: {
        services: {
          $map: {
            input: "$services",
            as: "service",
            in: {
              NameService: "$$service.name",
              base_price: "$$service.base_price",
              start_date: { $arrayElemAt: ["$used_service.start_date", { $indexOfArray: ["$used_service.IdService", "$$service.service_id"] }] }
            }
          }
        }
      }
    },
	{
    $addFields: {
      area_expense: { $multiply: [5000000, "$area"] },
      current_date: new Date(),
    }
  },
  {
    $addFields: {
      month_diff: { $month: "$current_date" },
      year_diff: { $year: "$current_date" }
    }
  },
  {
    $addFields: {
      services: {
        $map: {
          input: "$services",
          as: "service",
          in: {
            NameService: "$$service.NameService",
            base_price: "$$service.base_price",
            start_date: "$$service.start_date",
            day: {
              $cond: {
                if: {
                  $and: [
                    { $eq: [{ $month: "$$service.start_date" }, "$month_diff"] },
                    { $eq: [{ $year: "$$service.start_date" }, "$year_diff"] }
                  ]
                },
                then: {$toInt: {$divide: [{ $subtract: ["$current_date", "$$service.start_date"] },24 * 60 * 60 * 1000]}},
                else: 0
              }
            }
          }
        }
      }
    }
  },
  {
    $addFields: {
      days_in_month: {
        $switch: {
          branches: [
            { case: { $in: ["$month_diff", [1, 3, 5, 7, 8, 10, 12]] }, then: 31 },
            { case: { $in: ["$month_diff", [4, 6, 9, 11]] }, then: 30 },
            { case: { $eq: ["$year_diff", 2024] }, then: 29 }, // Năm nhuận
            { case: true, then: 28 } // Năm không nhuận
          ],
          default: "Unknown"
        }
      }
    }
  },
	{
    $addFields: {
      service_expense: {
        $map: {
          input: "$services",
          as: "service",
          in: {
            $multiply: [
              {
                $multiply: [
                  {
                    $add: [
                      1,
                      {
                        $multiply: [
                          0.05,
                          {
							$add: [
							  {
								$cond: {
								  if: { $lt: [{ $subtract: ["$area", 100] }, 0] },
								  then: 0,
								  else: { $trunc: { $divide: [{ $subtract: ["$area", 100] }, 10] }
								  }
								}
							  },
							  {
								$cond: {
								  if: { $lt: [{ $subtract: ["$employee_count", 10] }, 0] },
								  then: 0,
								  else: { $trunc: { $divide: [{ $subtract: ["$employee_count", 10] }, 5] }
								  }
								}
							  }
							]
						  }
                        ]
                      }
                    ]
                  },
                  { $divide: ["$$service.day", "$days_in_month"] }
                ]
              },
              "$$service.base_price"
            ]
          }
        }
      }
    }
  },
	{
    $addFields: {
      total_expense: {$add: ["$area_expense", { $sum: "$service_expense" }]}
    }
  },
	{
    $project: {
      _id: 1,
      name: 1,
      tax_code: 1,
      charter_capital: 1,
      industry: 1,
      employee_count: 1,
      address: 1,
      phone: 1,
      area: 1,
      total_expense: 1
    }
  },
	{$sort: { total_expense: -1 }}
]);


#cau 2
db.employees.aggregate([
  {
    $addFields: { current_date: new Date() }
  },
  {
    $addFields: {
      month_diff: { $month: "$current_date" },
      year_diff: { $year: "$current_date" },
      day_diff: { $dayOfMonth: "$current_date" }
    }
  },
  {
    $project: {
      _id: 1,
      company_id: 1,
      building_id: 1,
      name: 1,
      birth_date: 1,
      address: 1,
      phone: 1,
      timestamp_location: {
        $filter: {
          input: "$timestamp_location",
          as: "timestamp",
          cond: {
            $and: [
              { $eq: [{ $month: "$$timestamp.date" }, "$month_diff"] },
              { $eq: [{ $year: "$$timestamp.date" }, "$year_diff"] },
              { $eq: [{ $dayOfMonth: "$$timestamp.date" }, "$day_diff"] }
            ]
          }
        }
      }
    }
  }
])

#cau 3
db.companies.aggregate([
  {
    $unwind: "$used_service"
  },
  {
    $match: {
      "used_service.start_date": {
        $gte: ISODate("2024-10-01"),
        $lt: ISODate("2024-11-01")
      }
    }
  },
  {
    $group: {
      _id: "$used_service.service_id",
      num_used: { $sum: 1 }
    }
  },
  {
    $project: {
      _id: 0,
      id: "$_id",
      num_used: 1
    }
  },
  {
    $lookup: {
      from: "services",
      localField: "id",
      foreignField: "IdService",
      as: "services"
    }
  },
  {
    $addFields: {
      prices: { $arrayElemAt: ["$services.base_price", 0] }
    }
  },
  {
    $lookup: {
      from: "buildingEmployees",
      localField: "id",
      foreignField: "position",
      as: "servicesEmployees"
    }
  },
  {
    $addFields: {
      lenE: { $size: "$servicesEmployees" }
    }
  },
  {
    $project: {
      services: { $arrayElemAt: ["$services.name", 0] },
      date: new Date("2024-10-01"),
      salaries: {
        $map: {
          input: "$servicesEmployees",
          as: "emp",
          in: {
            name: "$$emp.name",
            birth_date: "$$emp.birth_date",
            address: "$$emp.address",
            phone: "$$emp.phone",
            level: "$$emp.level",
            salary: {
              $add: [
                { $multiply: [1000000, "$$emp.level"] },
                { $multiply: [
                  "$num_used",
                  { $divide: ["$prices", "$lenE"] }
                ]}
              ]
            }
          }
        }
      }
    }
  }
])